generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FAMILY_MEMBER
  GUEST
}

enum PriorityLevel {
  Low
  Medium
  High
}

model Family {
  id            String                  @id @default(cuid())
  name          String
  members       User[]                  @relation("FamilyMembers")
  cars          Car[]                   @relation("FamilyCars")
  tasks         Task[]                  @relation("FamilyTasks")
  shoppingItems ShoppingItem[]          @relation("FamilyShoppingItems")
  notes         Note[]                  @relation("FamilyNotes")
  goals         Goal[]                  @relation("FamilyGoals")
  recipes       Recipe[]                @relation("FamilyRecipes")
  savedItems    SavedShoppingListItem[] @relation("FamilySavedItems")
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}

model User {
  id                 String                  @id @default(cuid())
  email              String                  @unique
  name               String
  password           String
  role               UserRole                @default(GUEST)
  familyId           String?
  family             Family?                 @relation("FamilyMembers", fields: [familyId], references: [id])
  tasks              Task[]                  @relation("TaskCreator")
  shoppingItems      ShoppingItem[]          @relation("ShoppingItemCreator")
  categories         Category[]              @relation("UserCategories")
  recipes            Recipe[]                @relation("UserRecipes")
  notes              Note[]                  @relation("UserNotes")
  goals              Goal[]                  @relation("UserGoals")
  savedShoppingLists SavedShoppingList[]     @relation("UserSavedLists")
  cars               Car[]                   @relation("UserCars")
  carLocations       CarLocationHistory[]    @relation("UserCarLocations")
  savedItems         SavedShoppingListItem[] @relation("UserSavedItems")
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
}

model Task {
  id              String         @id @default(cuid())
  title           String
  description     String?
  completed       Boolean        @default(false)
  completedAt     DateTime?
  repeatFrequency String?
  priority        PriorityLevel?
  dueDate         DateTime?
  creatorId       String
  creator         User           @relation("TaskCreator", fields: [creatorId], references: [id])
  familyId        String?
  family          Family?        @relation("FamilyTasks", fields: [familyId], references: [id])
  categoryId      String?
  category        Category?      @relation("TaskCategory", fields: [categoryId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([familyId])
  @@index([creatorId, completed])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation("UserCategories", fields: [userId], references: [id])
  tasks     Task[]   @relation("TaskCategory")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?
  targetDate  DateTime?
  progress    Int       @default(0)
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  userId      String
  user        User      @relation("UserGoals", fields: [userId], references: [id])
  familyId    String?
  family      Family?   @relation("FamilyGoals", fields: [familyId], references: [id])
  subgoals    Subgoal[] @relation("GoalSubgoals")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([familyId])
}

model Subgoal {
  id          String   @id @default(cuid())
  title       String
  isCompleted Boolean  @default(false)
  goalId      String
  goal        Goal     @relation("GoalSubgoals", fields: [goalId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([goalId])
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String?
  isPinned  Boolean  @default(false)
  color     String?  @default("#ffffff")
  userId    String
  user      User     @relation("UserNotes", fields: [userId], references: [id])
  familyId  String?
  family    Family?  @relation("FamilyNotes", fields: [familyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([familyId])
}

model ShoppingItem {
  id          String            @id @default(cuid())
  name        String
  quantity    Int               @default(1)
  purchased   Boolean           @default(false)
  purchasedAt DateTime?
  notes       String?
  creatorId   String
  creator     User              @relation("ShoppingItemCreator", fields: [creatorId], references: [id])
  familyId    String?
  family      Family?           @relation("FamilyShoppingItems", fields: [familyId], references: [id])
  categoryId  String?
  category    ShoppingCategory? @relation("ShoppingItemCategory", fields: [categoryId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([familyId])
}

model ShoppingCategory {
  id         String                  @id @default(cuid())
  name       String
  items      ShoppingItem[]          @relation("ShoppingItemCategory")
  savedItems SavedShoppingListItem[] @relation("SavedItemCategory")
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
}

model SavedShoppingList {
  id        String                  @id @default(cuid())
  name      String
  userId    String
  user      User                    @relation("UserSavedLists", fields: [userId], references: [id])
  items     SavedShoppingListItem[] @relation("SavedListItems")
  createdAt DateTime                @default(now())
  updatedAt DateTime                @default(now())
}

model SavedShoppingListItem {
  id          String            @id @default(cuid())
  name        String
  quantity    Int               @default(1)
  savedListId String
  savedList   SavedShoppingList @relation("SavedListItems", fields: [savedListId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    ShoppingCategory? @relation("SavedItemCategory", fields: [categoryId], references: [id])
  userId      String
  user        User              @relation("UserSavedItems", fields: [userId], references: [id])
  familyId    String?
  family      Family?           @relation("FamilySavedItems", fields: [familyId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([savedListId])
  @@index([familyId])
}

model Car {
  id              String               @id @default(cuid())
  make            String
  model           String
  year            Int?
  licensePlate    String               @unique
  userId          String
  user            User                 @relation("UserCars", fields: [userId], references: [id])
  familyId        String?
  family          Family?              @relation("FamilyCars", fields: [familyId], references: [id])
  locationHistory CarLocationHistory[] @relation("CarLocationHistory")
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now())

  @@index([familyId])
}

model CarLocationHistory {
  id         String   @id @default(cuid())
  carId      String
  car        Car      @relation("CarLocationHistory", fields: [carId], references: [id], onDelete: Cascade)
  parkedById String
  parkedBy   User     @relation("UserCarLocations", fields: [parkedById], references: [id])
  location   String
  parkedAt   DateTime @default(now())
  latitude   Float?
  longitude  Float?
}

model Recipe {
  id           String   @id @default(cuid())
  title        String
  ingredients  String[]
  instructions String
  userId       String
  user         User     @relation("UserRecipes", fields: [userId], references: [id])
  familyId     String?
  family       Family?  @relation("FamilyRecipes", fields: [familyId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([familyId])
}
